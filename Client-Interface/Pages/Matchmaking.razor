@page "/Matchmaking"

@using System.Text.Json
@using Chromely.Core
@using Chromely.CefGlue
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers

@inject IJSRuntime JSRuntime
@inject ServerAppDemo.Models.MatchCreation mc

<section>
    @if (inQueue)
    {
        <div class="queue">
            @timer
        </div>
    }
    else
    {
        <div class="queues">
            <div class="queue-box">
                <div class="queue-btn">
                    @if (TryingToJoinQueue)
                    {
                        <button @onclick="JoinOneVOneQueue" disabled>Queue up</button>
                    }
                    else
                    {
                        <button @onclick="JoinOneVOneQueue">Queue up</button>
                    }
                </div>
                <div class="queue-top">
                    <div class="queue-header">
                        <h2>1v1</h2>
                    </div>
                    <div class="queue-content">
                        @if (CurrentMMR == null)
                        {
                            <div class="threes">
                                <div class="three-1 three"></div>
                                <div class="three-2 three"></div>
                                <div class="three-3 three"></div>
                            </div>
                        }
                        else
                        {
                            <h3>MMR @CurrentMMR</h3>
                        }

                    </div>
                </div>
            </div>
        </div>
    }
</section>

@code {
    HubConnection hubConnection;

    private bool inQueue { get; set; }
    public string textMatchFound { get; set; }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private string SummonerId { get; set; }
    private bool TryingToJoinQueue = false;
    private int? CurrentMMR { get; set; }
    Task QueueForOneVOne() => hubConnection.SendAsync("JoinMatchmaking", SummonerId);

    protected override async Task OnInitializedAsync()
    {
        CurrentMMR = null;
        SummonerId = await mc.GetSummonerId();
        inQueue = false;

    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (!string.IsNullOrWhiteSpace(SummonerId) && CurrentMMR == null)
        {
            CurrentMMR = await mc.GetSummonerMMR(SummonerId);
            StateHasChanged();
        }
    }


    private async Task JoinOneVOneQueue(MouseEventArgs x)
    {
        TryingToJoinQueue = true;
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://onevonehub20200507160408.azurewebsites.net/onevone")
                .Build();

            hubConnection.On<Match>("MatchNotification", (match) =>
            {
                MatchFound(match);

            });

            await hubConnection.StartAsync();
            await QueueForOneVOne();
            inQueue = true;
            await StartTimer();


        }
        catch (Exception e)
        {
            Console.Write(e.Message);
        }
    }

    private async void MatchFound(Match match)
    {
        inQueue = false;
        is_timerRunning = false;
        timer = new TimeSpan();
        if (match.BluePlayer.SummonerId == SummonerId)
        {
            await mc.CreateOneOnOneGame(match.MatchId, match.RedPlayer.SummonerId);
        }
        else if (match.RedPlayer.SummonerId == SummonerId)
        {
            await mc.JoinGame(match.BluePlayer.SummonerId, match.MatchId);
        }
    }

    TimeSpan timer = new TimeSpan();
    bool is_timerRunning = false;
    async Task StartTimer()
    {
        is_timerRunning = true;
        while (is_timerRunning)
        {
            await Task.Delay(1000);
            if (is_timerRunning)
            {
                timer = timer.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
        }
    }



    #region Model
    private class Match
    {
        public string MatchId { get; set; }
        public Player RedPlayer { get; set; }
        public Player BluePlayer { get; set; }

    }
    private class Player
    {
        public string ConnectionId { get; set; }
        public string SummonerId { get; set; }
        public int Elo { get; set; }
        public int SearchElo { get; set; }
        public DateTime Created { get; set; }
    }
    #endregion Model


}
