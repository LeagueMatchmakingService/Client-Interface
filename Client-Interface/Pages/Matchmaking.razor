@page "/Matchmaking"

@using System.Text.Json
@using Chromely.Core
@using Chromely.CefGlue
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers

@inject IJSRuntime JSRuntime
@inject ServerAppDemo.Models.MatchCreation mc
@inject ServerAppDemo.Models.MatchWatcher mw

<section>
    @if (MatchFoundScreen)
    {
        <div class="match-found-text">
            <h2>Match found</h2>
        </div>

    }
    else if (ResultShow)
    {
        <div class="match-result-screen">
            @if (result)
            {
                <h1>VICTORY!</h1>
                <div class="mmr-change">
                    <div class="mmr-text">
                        <h4>@CurrentMMR </h4>
                        <h5>@NewMMR</h5>
                    </div>
                    <div class="arrow-up"></div>
                </div>
            }
            else
            {
                <h1>DEFEAT!</h1>
                <div class="mmr-change">
                    <div class="mmr-text">
                        <h2>@CurrentMMR </h2>
                        <h3>@NewMMR</h3>
                    </div>
                    <div class="arrow-down"></div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="queues">
            <div class="queue-box">
                <div class="queue-btn">
                    @if (inQueue)
                    {
                        <h4>@timer</h4>
                    }
                    else
                    {
                        @if (TryingToJoinQueue)
                        {
                            <div class="loading-btn">
                                <div class="sk-circle">
                                    <div class="sk-circle1 sk-child"></div>
                                    <div class="sk-circle2 sk-child"></div>
                                    <div class="sk-circle3 sk-child"></div>
                                    <div class="sk-circle4 sk-child"></div>
                                    <div class="sk-circle5 sk-child"></div>
                                    <div class="sk-circle6 sk-child"></div>
                                    <div class="sk-circle7 sk-child"></div>
                                    <div class="sk-circle8 sk-child"></div>
                                    <div class="sk-circle9 sk-child"></div>
                                    <div class="sk-circle10 sk-child"></div>
                                    <div class="sk-circle11 sk-child"></div>
                                    <div class="sk-circle12 sk-child"></div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <button @onclick="JoinOneVOneQueue">Queue up</button>
                        }
                    }
                </div>
                <div class="queue-top">
                    <div class="queue-header">
                        <h2>1v1</h2>
                    </div>
                    <div class="queue-content">
                        @if (CurrentMMR == null)
                        {
                            <div class="threes">
                                <div class="three-1 three"></div>
                                <div class="three-2 three"></div>
                                <div class="three-3 three"></div>
                            </div>
                        }
                        else
                        {
                            <h3>MMR @CurrentMMR</h3>
                        }

                    </div>
                </div>
            </div>
        </div>
    }
</section>

@code {
    HubConnection hubConnection;

    private bool inQueue { get; set; }
    private bool MatchFoundScreen { get; set; }
    public string textMatchFound { get; set; }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private string SummonerId { get; set; }
    private bool TryingToJoinQueue = false;
    private int NewMMR { get; set; }
    private static int? CurrentMMR { get; set; }
    private bool result { get; set; }
    private bool ResultShow { get; set; }
    Task QueueForOneVOne() => hubConnection.SendAsync("JoinMatchmaking", SummonerId);

    protected override async Task OnInitializedAsync()
    {
        SummonerId = await mc.GetSummonerId();

    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MatchFoundScreen = false;
            inQueue = false;
            ResultShow = false;
            StateHasChanged();
        }
        if (string.IsNullOrWhiteSpace(SummonerId) && CurrentMMR == null)
        {
            CurrentMMR = await mc.GetSummonerMMR(Convert.ToInt32(SummonerId));
            StateHasChanged();
        }
    }

    private async Task JoinOneVOneQueue(MouseEventArgs x)
    {
        TryingToJoinQueue = true;
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://onevonehub20200507160408.azurewebsites.net/onevone")
                .Build();

            hubConnection.On<Match>
    ("MatchNotification", (match) =>
    {
        MatchFound(match);

    });

            await hubConnection.StartAsync();
            await QueueForOneVOne();
            inQueue = true;
            TryingToJoinQueue = false;
            await StartTimer();


        }
        catch (Exception e)
        {
            Console.Write(e.Message);
        }
    }

    private async void MatchFound(Match match)
    {
        MatchFoundScreen = true;
        inQueue = false;
        is_timerRunning = false;
        timer = new TimeSpan();
        StateHasChanged();
        if (match.BluePlayer.SummonerId == SummonerId)
        {
            await mc.CreateOneOnOneGame(match.MatchId.ToString(), match.RedPlayer.SummonerId);
        }
        else if (match.RedPlayer.SummonerId == SummonerId)
        {
            await mc.JoinGame(match.BluePlayer.SummonerId, match.MatchId.ToString());
        }
        var response = await mw.WatchMatch(match);
        result = response.Item1;
        await MatchDone(response.Item2);
    }

    private async Task MatchDone(int elo)
    {
        NewMMR = elo;
        ResultShow = true;
        MatchFoundScreen = false;
        StateHasChanged();
        await Task.Delay(5000);
        CurrentMMR = elo;
        ResultShow = false;
        StateHasChanged();
    }

    TimeSpan timer = new TimeSpan();
    bool is_timerRunning = false;
    async Task StartTimer()
    {
        if (!is_timerRunning)
        {
            is_timerRunning = true;
            while (is_timerRunning)
            {
                await Task.Delay(1000);
                if (is_timerRunning)
                {
                    timer = timer.Add(new TimeSpan(0, 0, 1));
                    StateHasChanged();
                }
            }
        }
    }
}
