@if (!_leagueDetected)
{
    <section class="topLayer">
        <div class="preloader" id="preloader">
            <div class="loader loader-1">
                <div class="loader-outter"></div>
                <div class="loader-inner"></div>
            </div>
            <div class="load-text">
                <h2>Waiting for League of Legends to start</h2>
            </div>
        </div>
    </section>
}
else
{
    <header class="header">
        <!--Main-Menu Area Start-->
        <div class="mainmenu-area">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg navbar-light">
                            <a class="navbar-brand" href="index.html">
                                <img src="assets/images/logo.png" alt="">
                            </a>
                            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#main_menu" aria-controls="main_menu"
                                    aria-expanded="false" aria-label="Toggle navigation">
                                <span class="navbar-toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse fixed-height" id="main_menu">
                                <ul class="navbar-nav ml-auto">
                                    <li class="nav-item">
                                        <NavLink class="nav-link" href="/">
                                            Home
                                            <div class="mr-hover-effect"></div>
                                        </NavLink>
                                    </li>
                                    <li class="nav-item">
                                        <NavLink class="nav-link" href="Leaderboard">
                                            Leaderboard
                                            <div class="mr-hover-effect"></div>
                                        </NavLink>
                                    </li>
                                    @*<li class="nav-item">
                                            <a class="nav-link" href="lottery.html">
                                                lottery
                                                <div class="mr-hover-effect"></div>
                                            </a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link" href="tournaments.html">
                                                tournaments
                                                <div class="mr-hover-effect"></div>
                                            </a>
                                        </li>
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown" aria-haspopup="true"
                                               aria-expanded="false">
                                                Pages
                                                <div class="mr-hover-effect"></div>
                                            </a>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="about.html"> <i class="fa fa-angle-double-right"></i>About</a></li>
                                                <li><a class="dropdown-item" href="affiliate.html"> <i class="fa fa-angle-double-right"></i>Affiliate</a></li>
                                                <li><a class="dropdown-item" href="awards.html"> <i class="fa fa-angle-double-right"></i>Awards</a></li>
                                                <li><a class="dropdown-item" href="bonus.html"> <i class="fa fa-angle-double-right"></i>Bonus</a></li>
                                                <li><a class="dropdown-item" href="cart.html"> <i class="fa fa-angle-double-right"></i>Cart</a></li>
                                                <li><a class="dropdown-item" href="faq.html"> <i class="fa fa-angle-double-right"></i>Faq</a></li>
                                                <li><a class="dropdown-item" href="how-it-work.html"> <i class="fa fa-angle-double-right"></i>How It Work</a></li>
                                                <li><a class="dropdown-item" href="terms-conditions.html"> <i class="fa fa-angle-double-right"></i>Terms & Condition</a></li>
                                                <li><a class="dropdown-item" href="terms-conditions-details.html"> <i class="fa fa-angle-double-right"></i>Condition Details</a></li>
                                                <li><a class="dropdown-item" href="404.html"> <i class="fa fa-angle-double-right"></i>404</a></li>
                                            </ul>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link" href="contact.html">
                                                Contact
                                                <div class="mr-hover-effect"></div>
                                            </a>
                                        </li>*@
                                </ul>
                                <NavLink href="Matchmaking" class="mybtn1">PLAY</NavLink>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
        <!--Main-Menu Area Start-->
    </header>
}


@inject ServerAppDemo.Models.MatchCreation mc
@code {
    private bool _leagueDetected = false;


    protected override async Task OnInitializedAsync()
    {
        _leagueDetected = await mc.CheckIfLeagueIsOpen();
        mc.CheckIfLeagueOpens += LeagueClientClosed;

    }
    protected override async void OnAfterRender(bool firstRender)
    {
        if (!_leagueDetected)
        {
            await CheckForLeagueOpen();
            await mc.CheckIfUserExists();

        }
        else
        {
            await mc.CheckIfUserExists();
        }
    }

    private async void LeagueClientClosed()
    {
        _leagueDetected = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task CheckForLeagueOpen()
    {
        while (!_leagueDetected)
        {
            var response = await mc.CheckIfLeagueIsOpen();
            if (response)
            {
                _leagueDetected = response;
                StateHasChanged();
            }
            await Task.Delay(5000);
        }
    }
}